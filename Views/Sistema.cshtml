@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.Sistema>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.Models.PublishedContent;
@using Newtonsoft.Json;
@using Umbraco.Extensions;
@using System.Linq;
@using Umbraco.Cms.Core.Models;
@{
    Layout = "Master.cshtml";

    // Получаем данные из Document Type
    var systemName = Model.SystemName;
    var systemTag = Model.SystemTag;
    var systemDescription = Model.SystemDescription;
    var mainImage = Model.MainImage;
    var detailImage = Model.DetailImage;
    @*var detailedContent = Model.DetailedContent;*@
    var imageGallery = Model.ImageGallery;
    string youtubeVideoId = Model.VideoPrezentatsiya;

    // Nested Content данные
    var systemFeatures = Model.SystemFeatures;
    var systemAdvantages = Model.SystemAdvantages;
    
    // Получаем все объекты (obEkt) которые используют эту систему
    var rootNode = Model.Root();
    var allObjects = rootNode.DescendantsOfType("obEkt");

    // Фильтруем объекты по полю obl (облицовочный материал)
    var realizedProjects = allObjects
        .Where(obj =>
        {
            var obl = obj.Value<string>("obl") ?? "";
            // Проверяем содержит ли поле obl название системы (регистронезависимый поиск)
            return !string.IsNullOrWhiteSpace(obl) &&
                   obl.IndexOf(systemName, StringComparison.OrdinalIgnoreCase) >= 0;
        })
        .OrderByDescending(obj => obj.Value<int?>("god") ?? 0)
        .Take(10)
        .ToList();

    // Данные о станке
    var toolTitle = Model.ToolTitle?.ToString();
    var toolDescription = Model.ToolDescription?.ToString();
    var toolImage = Model.ToolImage;
}

<!-- Main Content Section -->
<section class="container mx-auto mb-10 xl:mb-40 mt-10 md:mt-20">
    <div class="grid grid-cols-1 lg:grid-cols-12 gap-5 items-stretch">

        <!-- Left Content Area -->
        <div class="lg:col-span-8 card shadow-xl h-full flex flex-col">
            <div class="space-y-6 flex-1">
                <!-- Breadcrumbs -->
                <nav class="bg-background-primary inline-block rounded-3xl" aria-label="Breadcrumb">
                    <ol class="list-reset inline-flex flex-wrap justify-center text-regular-secondary font-medium rounded-lg p-2 md:p-3 text-sm md:body2">
                        <li>
                            <a href="/" class="text-regular-secondary hover:text-accent">Главная</a>
                            <span class="mx-1 md:mx-2">/</span>
                        </li>
                        <li>
                            <a href="/sistemy/" class="text-regular-secondary hover:text-accent">Системы</a>
                            <span class="mx-1 md:mx-2">/</span>
                        </li>
                        <li class="text-bold">@systemName</li>
                    </ol>
                </nav>

                <!-- Main Title -->
                <h1 class="h1">@systemName</h1>

                <!-- System Tag -->
                @if (!string.IsNullOrEmpty(systemTag))
                {
                    <div class="inline-block">
                        <span class="border border-accent text-accent bg-white px-4 py-3 body1 rounded-2xl font-medium">@systemTag</span>
                    </div>
                }

                <!-- Description -->
                <p class="body1 text-regular-primary">
                    @systemDescription
                </p>

                <!-- Call to Action Button -->
                <div class="mt-20">
                    @if (!string.IsNullOrEmpty(youtubeVideoId))
                    {
                        <button class="btn btn-filled btn-primary btn-lg" onclick="openVideoModal('@youtubeVideoId')">
                            ВИДЕО-ПРЕЗЕНТАЦИЯ
                        </button>
                    }
                </div>
            </div>
        </div>

        <!-- Right Visual Area -->
        <div class="lg:col-span-4 relative h-full flex flex-col image-item">
            @if (mainImage != null)
            {
                <!-- Main Large Image -->
                <div class="relative group cursor-pointer flex-1" onclick="openImageModal('@mainImage.Url()', '@mainImage.Value("altText", fallback: Fallback.ToDefaultValue, defaultValue: systemName)')">
                    <img src="@mainImage.Url()"
                         alt="@mainImage.Value("altText", fallback: Fallback.ToDefaultValue, defaultValue: systemName)"
                         class="w-full h-full object-cover rounded-4xl"
                         loading="lazy">
                    <!-- Hover Overlay -->
                    <div class="hover-overlay absolute inset-0 bg-black opacity-0 transition-all duration-300 rounded-lg"></div>

                    <!-- Zoom Icon (separate from overlay) -->
                    <div class="zoom-icon absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 opacity-0 transition-all duration-300 z-20">
                        <img src="/assets/icons/zoom.svg" alt="zoom" class="w-12 h-12">
                    </div>
                </div>
            }

            @if (detailImage != null)
            {
                <!-- Small Detail Image (Bottom Left Corner) -->
                <div class="absolute bottom-0 left-0 cursor-pointer z-10 pt-4 pr-4 rounded-tr-2xl bg-background-primary wrapper-small-image">
                    <div class="small-image">
                        <img src="@detailImage.Url()"
                             alt="@detailImage.Value("altText", fallback: Fallback.ToDefaultValue, defaultValue: "Деталь крепления")"
                             class="rounded-2xl"
                             loading="lazy"
                             width="150"
                             height="150">
                    </div>
                </div>
            }
        </div>
    </div>
</section>

@if (Model.TestBlockGrid != null && Model.TestBlockGrid.Any())
{
    <div class="container-sm mt-20 mb-10 xl:mb-40">
        <div class="text-section card">
            @await Html.GetBlockGridHtmlAsync(Model.TestBlockGrid)
        </div>
    </div>
}

@*@if (detailedContent != null || (imageGallery != null))
{
    <div class="container-sm mt-20 mb-10 xl:mb-40">
        <div class="text-section card">
            @if (detailedContent != null)
            {
                @Html.Raw(detailedContent)
            }

            @if (imageGallery != null)
            {
                <!-- Static Images Gallery -->
                <div class="space-y-6 mt-10 mb-10">
                    <img src="@imageGallery.Url()"
                         alt="@(imageGallery.Value("altText") ?? systemName)"
                         class="w-full h-auto rounded-2xl"
                         loading="lazy">
                </div>
            }
        </div>
    </div>
}*@

@if (systemFeatures != null && systemFeatures.Any())
{
    <!-- System Features Section -->
    <section class="container mx-auto mb-10 xl:mb-40">
        <div class="text-center mb-16">
            <h2 class="h2">Особенности системы</h2>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-5">
            @{
                int featureIndex = 1;
            }
            @foreach (var feature in systemFeatures)
            {
                <div class="flex items-start gap-4 p-6 rounded-3xl border border-gray h-full">
                    <div class="flex-shrink-0 w-8 h-8 border border-accent text-accent rounded-full flex items-center justify-center">
                        <span class="text-accent">@featureIndex</span>
                    </div>
                    <p class="body2 text-neutral-800 leading-relaxed">
                        @feature.Content.Value("featureText")
                    </p>
                </div>
                featureIndex++;
            }
        </div>
    </section>
}

@if (systemAdvantages != null && systemAdvantages.Any())
{
    <!-- System Advantages Section -->
    <section class="container mx-auto mb-10 xl:mb-40">
        <div class="text-center mb-16">
            <h2 class="h2">Преимущества системы</h2>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-5">
            @foreach (var advantage in systemAdvantages)
            {
                var advantageTitle = advantage.Content.Value("advantageTitle")?.ToString();
                var advantageDescription = advantage.Content.Value("advantageDescription")?.ToString();
                var advantageIconMedia = advantage.Content.Value("advantageIcon") as IPublishedContent;

                <div class="flex flex-col p-6 bg-white rounded-3xl shadow-xl h-full">
                    <div class="flex flex-col mb-4">
                        @if (advantageIconMedia != null)
                        {
                            <div class="flex-shrink-0 w-32 h-32 flex items-center justify-center mb-3 -ml-6">
                                <img src="@advantageIconMedia.Url()" alt="@advantageTitle" class="w-16 h-16">
                            </div>
                        }
                        <h3 class="h3">@advantageTitle</h3>
                    </div>
                    <p class="body2 text-neutral-800 leading-relaxed">
                        @advantageDescription
                    </p>
                </div>
            }
        </div>
    </section>
}

@if (!string.IsNullOrEmpty(toolTitle) && !string.IsNullOrEmpty(toolDescription))
{
    <!-- Special Machine Section -->
    <section class="container mx-auto mb-10 xl:mb-40">
        <div class="grid grid-cols-1 lg:grid-cols-12 gap-5 items-stretch">
            <!-- Left Content - 70% width -->
            <div class="lg:col-span-8 bg-white rounded-3xl p-8 shadow-xl h-full flex flex-col">
                <div class="space-y-6">
                    <h2 class="h2">@toolTitle</h2>
                    <p class="body1 text-neutral-800 leading-relaxed">
                        @toolDescription
                    </p>
                </div>
            </div>

            @if (toolImage != null)
            {
                <!-- Right Images - 30% width -->
                <div class="lg:col-span-4 bg-white rounded-3xl p-8 shadow-xl h-full flex items-center justify-center">
                    <div class="w-full">
                        <div class="relative group cursor-pointer" onclick="openImageModal('@toolImage.Url()', '@toolImage.Value("altText", fallback: Fallback.ToDefaultValue, defaultValue: toolTitle)')">
                            <img src="@toolImage.Url()"
                                 alt="@toolImage.Value("altText", fallback: Fallback.ToDefaultValue, defaultValue: toolTitle)"
                                 class="w-full h-auto rounded-3xl"
                                 loading="lazy">
                            <!-- Hover Overlay -->
                            <div class="hover-overlay absolute inset-0 bg-black opacity-0 transition-all duration-300 rounded-3xl"></div>

                            <!-- Zoom Icon -->
                            <div class="zoom-icon absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 opacity-0 transition-all duration-300 z-20">
                                <img src="/assets/icons/zoom.svg" alt="zoom" class="w-8 h-8">
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </section>
}
@* Реализованные Объекты *@
@if (realizedProjects.Any())
{
    <section class="container mobile-section-divider">
        <h2 class="h2 text-center mb-10">Реализованные объекты</h2>
        
        @{
            var projectCount = realizedProjects.Count();
            var firstRowProjects = realizedProjects.Take(2).ToList();
            var secondRowProjects = realizedProjects.Skip(2).Take(3).ToList();
            var thirdRowProjects = realizedProjects.Skip(5).Take(3).ToList();
        }
        
        @* РЯД 1 (2 элемента) *@
        @if (firstRowProjects.Any())
        {
            <div class="grid md:grid-cols-4 md:gap-x-6 gap-y-10 md:gap-y-0 mt-10 md:mt-14 mb-14 md:mb-20">
                @foreach (var project in firstRowProjects)
                {
                    var projectName = project.Value<string>("objectName") ?? project.Name;
                    var projectDescription = project.Value<string>("description") ?? "";
                    var projectUrl = project.Url();
                    var gallery = project.Value<IEnumerable<MediaWithCrops>>("imageGallery");
                    var coverImage = gallery?.FirstOrDefault();
                    var imageUrl = coverImage?.Url() ?? "/assets/img/placeholder.jpg";
                    var heightClass = firstRowProjects.IndexOf(project) == 0 ? "md:h-[310px]" : "md:h-[460px]";
                    
                    <div class="md:col-span-2 flex flex-col group">
                        <div class="w-full aspect-[3/2] md:aspect-auto @heightClass overflow-hidden rounded-4xl">
                            <img src="@imageUrl" alt="@projectName" class="w-full h-full object-cover rounded-4xl" loading="lazy">
                        </div>
                        <div class="mt-4 md:mt-8">
                            <div class="md:flex md:justify-between gap-3">
                                <div class="flex flex-col gap-1">
                                    <h4 class="mt-3 mb-4 md:mt-0 group-hover:text-[#BD1A1A] transition-colors">@projectName</h4>
                                    <div class="body1 text-regular-primary">@projectDescription</div>
                                </div>
                                <a href="@projectUrl" class="btn-primary btn-stroke mt-4 md:mt-0 btn-inline btn-sm">О ПРОЕКТЕ</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        
        @* РЯД 2 (3 элемента) *@
        @if (secondRowProjects.Any())
        {
            <div class="grid md:grid-cols-4 md:gap-6 gap-y-10 @(thirdRowProjects.Any() ? "mb-14 md:mb-20" : "")">
                @foreach (var project in secondRowProjects)
                {
                    var projectName = project.Value<string>("objectName") ?? project.Name;
                    var projectDescription = project.Value<string>("description") ?? "";
                    var projectUrl = project.Url();
                    var gallery = project.Value<IEnumerable<MediaWithCrops>>("imageGallery");
                    var coverImage = gallery?.FirstOrDefault();
                    var imageUrl = coverImage?.Url() ?? "/assets/img/placeholder.jpg";
                    var colSpan = secondRowProjects.IndexOf(project) == 2 ? "md:col-span-2" : "md:col-span-1";
                    var layoutClass = secondRowProjects.IndexOf(project) == 2 ? "md:flex md:justify-between gap-3" : "flex flex-col gap-1";
                    
                    <div class="@colSpan flex flex-col group">
                        <div class="w-full aspect-[3/2] md:aspect-auto md:h-[300px] overflow-hidden rounded-4xl">
                            <img src="@imageUrl" alt="@projectName" class="w-full h-full object-cover rounded-4xl" loading="lazy">
                        </div>
                        <div class="mt-4 md:mt-8">
                            <div class="@layoutClass">
                                <div class="flex flex-col gap-1">
                                    <h4 class="mt-3 mb-4 md:mt-0 group-hover:text-[#BD1A1A] transition-colors">@projectName</h4>
                                    <div class="body1 text-regular-primary">@projectDescription</div>
                                </div>
                                <a href="@projectUrl" class="btn-primary btn-stroke mt-4 @(secondRowProjects.IndexOf(project) == 2 ? "md:mt-0" : "") btn-inline btn-sm">О ПРОЕКТЕ</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        
        @* РЯД 3 (3 элемента) - если есть еще объекты *@
        @if (thirdRowProjects.Any())
        {
            <div class="grid md:grid-cols-4 md:gap-6 gap-y-10">
                @foreach (var project in thirdRowProjects)
                {
                    var projectName = project.Value<string>("objectName") ?? project.Name;
                    var projectDescription = project.Value<string>("description") ?? "";
                    var projectUrl = project.Url();
                    var gallery = project.Value<IEnumerable<MediaWithCrops>>("imageGallery");
                    var coverImage = gallery?.FirstOrDefault();
                    var imageUrl = coverImage?.Url() ?? "/assets/img/placeholder.jpg";
                    var colSpan = thirdRowProjects.IndexOf(project) == 2 ? "md:col-span-2" : "md:col-span-1";
                    var layoutClass = thirdRowProjects.IndexOf(project) == 2 ? "md:flex md:justify-between gap-3" : "flex flex-col gap-1";
                    
                    <div class="@colSpan flex flex-col group">
                        <div class="w-full aspect-[3/2] md:aspect-auto md:h-[300px] overflow-hidden rounded-4xl">
                            <img src="@imageUrl" alt="@projectName" class="w-full h-full object-cover rounded-4xl" loading="lazy">
                        </div>
                        <div class="mt-4 md:mt-8">
                            <div class="@layoutClass">
                                <div class="flex flex-col gap-1">
                                    <h4 class="mt-3 mb-4 md:mt-0 group-hover:text-[#BD1A1A] transition-colors">@projectName</h4>
                                    <div class="body1 text-regular-primary">@projectDescription</div>
                                </div>
                                <a href="@projectUrl" class="btn-primary btn-stroke mt-4 @(thirdRowProjects.IndexOf(project) == 2 ? "md:mt-0" : "") btn-inline btn-sm">О ПРОЕКТЕ</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </section>
}


<!-- Image Modal (оставляем без изменений) -->
<div id="imageModal" class="fixed inset-0 bg-black bg-opacity-30 z-50 hidden flex items-center justify-center p-4">
    <div class="relative w-full h-full flex items-center justify-center">
        <img id="modalImage" src="" alt="" class="max-w-none max-h-none w-auto h-auto object-contain rounded-lg shadow-2xl">

        <!-- Close Button -->
        <button onclick="closeImageModal()" class="absolute top-6 right-6 bg-white/90 hover:bg-white transition-all duration-200 rounded-full p-4 shadow-lg cursor-pointer z-10">
            <svg class="w-8 h-8 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>

        <!-- Image Alt Text -->
        <div class="absolute bottom-6 left-6 bg-black/80 text-white px-6 py-3 rounded-3xl backdrop-blur-sm">
            <p id="modalImageAlt" class="text-base font-medium"></p>
        </div>

        <!-- Zoom Controls -->
        <div class="absolute bottom-6 right-6 flex gap-3">
            <button onclick="zoomIn()" class="bg-white/90 hover:bg-white transition-all duration-200 rounded-full p-3 shadow-lg cursor-pointer">
                <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
            </button>
            <button onclick="zoomOut()" class="bg-white/90 hover:bg-white transition-all duration-200 rounded-full p-3 shadow-lg cursor-pointer">
                <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                </svg>
            </button>
            <button onclick="resetZoom()" class="bg-white/90 hover:bg-white transition-all duration-200 rounded-full p-3 shadow-lg cursor-pointer">
                <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"></path>
                </svg>
            </button>
        </div>
    </div>
</div>
<!-- Video Modal -->
<div id="videoModal" class="fixed inset-0 bg-black bg-opacity-80 z-50 hidden flex items-center justify-center p-4">
    <div class="relative w-full max-w-4xl aspect-video">
        <iframe id="youtubeFrame"
                src=""
                class="w-full h-full rounded-lg"
                frameborder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowfullscreen>
        </iframe>

        <!-- Close Button -->
        <button onclick="closeVideoModal()" class="absolute -top-12 right-0 text-white hover:text-gray-300 transition-colors">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>
    </div>
</div>

<script>
    function openVideoModal(videoId) {
        const modal = document.getElementById('videoModal');
        const iframe = document.getElementById('youtubeFrame');

        iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
    }

    function closeVideoModal() {
        const modal = document.getElementById('videoModal');
        const iframe = document.getElementById('youtubeFrame');

        iframe.src = '';
        modal.classList.add('hidden');
        document.body.style.overflow = 'auto';
    }

    // Close on Escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeVideoModal();
        }
    });

    // Close on backdrop click
    document.getElementById('videoModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeVideoModal();
        }
    });
</script>
<script>
    // Image Modal Functionality (оставляем без изменений)
    let currentZoom = 1;
    let isDragging = false;
    let startX, startY, translateX = 0, translateY = 0;

    function openImageModal(imageSrc, imageAlt) {
      const modal = document.getElementById('imageModal');
      const modalImage = document.getElementById('modalImage');
      const modalImageAlt = document.getElementById('modalImageAlt');

      modalImage.src = imageSrc;
      modalImageAlt.textContent = imageAlt;
      modal.classList.remove('hidden');

      // Reset zoom and position
      currentZoom = 1;
      translateX = 0;
      translateY = 0;
      updateImageTransform();

      // Prevent body scroll
      document.body.style.overflow = 'hidden';
    }

    function closeImageModal() {
      const modal = document.getElementById('imageModal');
      modal.classList.add('hidden');

      // Restore body scroll
      document.body.style.overflow = 'auto';
    }

    function zoomIn() {
      currentZoom = Math.min(currentZoom * 1.2, 5);
      updateImageTransform();
    }

    function zoomOut() {
      currentZoom = Math.max(currentZoom / 1.2, 0.5);
      updateImageTransform();
    }

    function resetZoom() {
      currentZoom = 1;
      translateX = 0;
      translateY = 0;
      updateImageTransform();
    }

    function updateImageTransform() {
      const modalImage = document.getElementById('modalImage');
      modalImage.style.transform = `scale(${currentZoom}) translate(${translateX}px, ${translateY}px)`;
    }

    // Mouse drag functionality
    function startDrag(e) {
      if (e.target.id === 'modalImage') {
        isDragging = true;
        startX = e.clientX - translateX;
        startY = e.clientY - translateY;
        e.preventDefault();
      }
    }

    function drag(e) {
      if (isDragging) {
        translateX = e.clientX - startX;
        translateY = e.clientY - startY;
        updateImageTransform();
      }
    }

    function stopDrag() {
      isDragging = false;
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', function() {
      const modal = document.getElementById('imageModal');
      const modalImage = document.getElementById('modalImage');

      // Mouse events for dragging
      modalImage.addEventListener('mousedown', startDrag);
      document.addEventListener('mousemove', drag);
      document.addEventListener('mouseup', stopDrag);

      // Close modal on backdrop click
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          closeImageModal();
        }
      });

      // Close modal on Escape key
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          closeImageModal();
        }
      });
    });
</script>