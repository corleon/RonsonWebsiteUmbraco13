@using Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.Models;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.ObEkt>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Extensions;
@using System.Linq;
@{
	Layout = "Master.cshtml";
	
	// Получаем данные объекта
	var objectName = Model.ObjectName ?? "";
	var description = Model.Description ?? "";
	var completionYear = Model.God;
	var coveringMaterial = Model.Obl ?? "";
	var systems = Model.Systems ?? Enumerable.Empty<string>();
	
	// Получаем изображения галереи
	var imageGallery = Model.ImageGallery;
	var galleryImages = imageGallery?.ToList() ?? new List<MediaWithCrops>();
	
	// Получаем обложку
	@*var cover = Model.Cover;*@
	
	// Получаем родительскую категорию для хлебных крошек
	var parentNode = Model.Parent;
	var parentName = parentNode?.Name ?? "Объекты";
	var parentUrl = parentNode?.Url() ?? "/obekty/zhilye-kompleksy/";
}

<!-- Breadcrumb -->
<nav class="mb-6 md:mb-8 mt-8 md:mt-16 text-center" aria-label="Breadcrumb">
    <ol class="list-reset inline-flex flex-wrap justify-center text-regular-secondary font-medium bg-white rounded-lg p-2 md:p-3 text-sm md:body2">
        <li>
            <a href="/" class="text-regular-secondary hover:text-accent">Главная</a>
            <span class="mx-1 md:mx-2">/</span>
        </li>
        <li>
            <a href="@parentUrl" class="text-regular-secondary hover:text-accent">@parentName</a>
            <span class="mx-1 md:mx-2">/</span>
        </li>
        <li class="text-bold">@objectName</li>
    </ol>
</nav>

<!-- Object Content Section -->
<div class="container mx-auto mb-10 md:mb-40">
    <div class="grid lg:grid-cols-2 gap-8 items-stretch">
        <!-- Left Section - Information Card -->
        <div class="card h-full flex flex-col justify-between shadow-xl">
            <div>
                <h1 class="h1 mb-4 md:mb-6">@objectName</h1>

                <!-- Tags/Buttons - Systems -->
                @if (systems.Any())
                {
                    <div class="flex flex-wrap gap-2 md:gap-3 mb-4 md:mb-6">
                        @foreach (var system in systems)
                        {
                            <span class="border border-accent text-accent bg-white px-3 py-2 md:px-4 md:py-3 body1 rounded-2xl font-medium text-sm md:text-base">@system</span>
                        }
                    </div>
                }

                <!-- Material Description -->
                @if (!string.IsNullOrEmpty(coveringMaterial))
                {
                    <p class="body1 mb-8 md:mb-12 text-bold">
                        <b>Облицовочный материал:</b> @coveringMaterial
                    </p>
                }

                <!-- Address and Completion Info -->
                <div class="grid grid-cols-1 md:flex gap-4 md:gap-6">
                    @if (!string.IsNullOrEmpty(description))
                    {
                        <div class="border border-gray rounded-lg p-3 md:p-4 flex-1">
                            <p class="body1 text-bold">@description</p>
                            @*<p class="body2 text-regular-secondary mt-1">Адрес объекта</p>*@
                        </div>
                    }
                    @if (completionYear > 0)
                    {
                        <div class="border border-gray rounded-lg p-3 md:p-4">
                            <p class="body1 text-bold">@completionYear</p>
                            <p class="body2 text-regular-secondary mt-1">Окончание монтажа</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Right Section - Image Slider -->
        <div class="h-full flex flex-col">
            <!-- Story-like Slider -->
            <div class="slider-container h-full flex flex-col">
                <div class="slider-track overflow-hidden shadow-lg lg:flex-1 relative">
                    @if (galleryImages.Any())
                    {
                        @for (int i = 0; i < galleryImages.Count; i++)
                        {
                            var image = galleryImages[i];
                            var imageUrl = image.Url();
                            var imageAlt = !string.IsNullOrEmpty(image.Name) ? $"{objectName} - {image.Name}" : objectName;
                            var activeClass = i == 0 ? "active" : "";
                            
                            <div class="slider-item @activeClass">
                                <img src="@imageUrl" alt="@imageAlt" loading="lazy" class="w-full h-full object-cover">
                                <button onclick="openImageModal('@imageUrl', '@imageAlt')" class="absolute top-4 right-4 transition-all duration-200 rounded-full backdrop-blur-sm cursor-pointer zoom-button" data-slide="@i">
                                    <img src="/assets/icons/zoom.svg" alt="zoom" class="w-12 h-12">
                                </button>
                            </div>
                        }
                    }
                    @*else if (cover != null)
                    {
                        var coverUrl = cover.Url();
                        var coverAlt = objectName;
                        
                        <div class="slider-item active">
                            <img src="@coverUrl" alt="@coverAlt" loading="lazy" class="w-full h-full object-cover">
                            <button onclick="openImageModal('@coverUrl', '@coverAlt')" class="absolute top-4 right-4 transition-all duration-200 rounded-full backdrop-blur-sm cursor-pointer zoom-button" data-slide="0">
                                <img src="/assets/icons/zoom.svg" alt="zoom" class="w-12 h-12">
                            </button>
                        </div>
                    }*@
                </div>
                <div class="slider-controls mt-4">
                    <!-- Controls will be generated by JavaScript -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Image Modal -->
<div id="imageModal" class="fixed inset-0 bg-black bg-opacity-30 z-50 hidden flex items-center justify-center p-2">
    <div class="relative w-full h-full flex items-center justify-center">
        <img id="modalImage" src="" alt="" class="max-w-none max-h-none w-auto h-auto object-contain rounded-lg shadow-2xl">
        <button onclick="closeImageModal()" class="absolute top-6 right-6 bg-white/90 hover:bg-white transition-all duration-200 rounded-full p-4 shadow-lg cursor-pointer z-10">
            <svg class="w-8 h-8 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>
        <div class="absolute bottom-6 left-6 bg-black/80 text-white px-6 py-3 rounded-xl backdrop-blur-sm">
            <p id="modalImageAlt" class="text-base font-medium"></p>
        </div>

        <!-- Zoom Controls -->
        <div class="absolute bottom-6 right-6 flex gap-3">
            <button onclick="zoomIn()" class="bg-white/90 hover:bg-white transition-all duration-200 rounded-full p-3 shadow-lg cursor-pointer">
                <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
            </button>
            <button onclick="zoomOut()" class="bg-white/90 hover:bg-white transition-all duration-200 rounded-full p-3 shadow-lg cursor-pointer">
                <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                </svg>
            </button>
            <button onclick="resetZoom()" class="bg-white/90 hover:bg-white transition-all duration-200 rounded-full p-3 shadow-lg cursor-pointer">
                <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"></path>
                </svg>
            </button>
        </div>
    </div>
</div>

<style>
    /* Slider styles */
    .slider-track {
        position: relative;
        width: 100%;
        min-height: 400px;
    }
    
    .slider-item {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        transition: opacity 0.5s ease-in-out;
        pointer-events: none;
    }
    
    .slider-item.active {
        opacity: 1;
        pointer-events: auto;
    }
    
    .slider-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    /* Slider controls */
    .slider-controls {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem;
    }
    
    .slider-dot {
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .slider-dot:hover {
        background-color: #BD1A1A;
    }
    
    .slider-arrow {
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .zoom-button {
        z-index: 10;
    }
</style>

<script>
    // Image Modal Functions
    let currentZoom = 1;
    let isDragging = false;
    let startX = 0;
    let startY = 0;
    let translateX = 0;
    let translateY = 0;

    function openImageModal(imageSrc, imageAlt) {
        console.log('Opening modal with:', { imageSrc, imageAlt });

        const modal = document.getElementById('imageModal');
        const modalImage = document.getElementById('modalImage');
        const modalImageAlt = document.getElementById('modalImageAlt');

        if (modal && modalImage && modalImageAlt) {
            modalImage.src = imageSrc;
            modalImage.alt = imageAlt;
            modalImageAlt.textContent = imageAlt;
            modal.classList.remove('hidden');
            resetZoom();

            console.log('Modal opened:', {
                modalSrc: modalImage.src,
                modalAlt: modalImage.alt,
                modalAltText: modalImageAlt.textContent
            });
        } else {
            console.error('Modal elements not found');
        }

        // Add dragging functionality
        modalImage.addEventListener('mousedown', startDrag);
        document.addEventListener('mousemove', drag);
        document.addEventListener('mouseup', stopDrag);
    }

    function closeImageModal() {
        const modal = document.getElementById('imageModal');
        const modalImage = document.getElementById('modalImage');

        if (modal && modalImage) {
            modal.classList.add('hidden');
            modalImage.src = '';
            modalImage.alt = '';
            resetZoom();

            // Remove dragging listeners
            modalImage.removeEventListener('mousedown', startDrag);
            document.removeEventListener('mousemove', drag);
            document.removeEventListener('mouseup', stopDrag);
        }
    }

    function zoomIn() {
        currentZoom = Math.min(currentZoom + 0.2, 3);
        applyZoom();
    }

    function zoomOut() {
        currentZoom = Math.max(currentZoom - 0.2, 0.5);
        applyZoom();
    }

    function resetZoom() {
        currentZoom = 1;
        translateX = 0;
        translateY = 0;
        applyZoom();
    }

    function applyZoom() {
        const modalImage = document.getElementById('modalImage');
        if (modalImage) {
            modalImage.style.transform = `scale(${currentZoom}) translate(${translateX}px, ${translateY}px)`;
        }
    }

    function startDrag(e) {
        if (currentZoom > 1) {
            isDragging = true;
            startX = e.clientX - translateX;
            startY = e.clientY - translateY;
            e.preventDefault();
        }
    }

    function drag(e) {
        if (isDragging) {
            translateX = e.clientX - startX;
            translateY = e.clientY - startY;
            applyZoom();
        }
    }

    function stopDrag() {
        isDragging = false;
    }

    // Close modal on Escape key
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            closeImageModal();
        }
    });

    // Close modal on background click
    document.getElementById('imageModal')?.addEventListener('click', (e) => {
        if (e.target.id === 'imageModal') {
            closeImageModal();
        }
    });

    // Slider functionality
    document.addEventListener('DOMContentLoaded', () => {
        const sliderContainer = document.querySelector('.slider-container');
        if (!sliderContainer) return;

        const track = sliderContainer.querySelector('.slider-track');
        const items = Array.from(track.querySelectorAll('.slider-item'));
        const controlsContainer = sliderContainer.querySelector('.slider-controls');

        let currentSlide = 0;
        let autoPlayTimer = null;
        let isInteracting = false;

        // Only proceed if we have slides
        if (items.length === 0) return;

        // Create controls (dots + arrows)
        function createControls() {
            let html = '<div class="flex items-center justify-center gap-4">';

            // Previous arrow
            if (items.length > 1) {
                html += `
                    <button class="slider-arrow prev-slide p-2 rounded-full hover:bg-gray-100 transition-colors" aria-label="Previous slide">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                        </svg>
                    </button>
                `;
            }

            // Dots container
            html += '<div class="flex gap-2">';
            items.forEach((_, i) => {
                html += `<button class="slider-control w-2 h-2 rounded-full transition-all ${i === 0 ? 'bg-accent w-8 active' : 'bg-gray-300'}" data-slide="${i}"></button>`;
            });
            html += '</div>';

            // Next arrow
            if (items.length > 1) {
                html += `
                    <button class="slider-arrow next-slide p-2 rounded-full hover:bg-gray-100 transition-colors" aria-label="Next slide">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                    </button>
                `;
            }

            html += '</div>';
            controlsContainer.innerHTML = html;
            
            // Add event listeners immediately after creating controls
            setTimeout(() => {
                const controls = controlsContainer.querySelectorAll('.slider-control');
                
                controls.forEach(control => {
                    control.addEventListener('click', () => {
                        goToSlide(parseInt(control.dataset.slide));
                        startAutoPlay();
                    });
                });

                const prevBtn = controlsContainer.querySelector('.prev-slide');
                const nextBtn = controlsContainer.querySelector('.next-slide');
                
                if (prevBtn) prevBtn.addEventListener('click', () => { prevSlide(); startAutoPlay(); });
                if (nextBtn) nextBtn.addEventListener('click', () => { nextSlide(); startAutoPlay(); });
            }, 0);
        }

        // Sync active states
        function syncActive(index) {
            items.forEach((item, i) => {
                item.classList.toggle('active', i === index);
            });
            
            const controls = controlsContainer.querySelectorAll('.slider-control');
            
            controls.forEach((control, i) => {
                if (i === index) {
                    control.classList.add('bg-accent', 'w-8', 'active');
                    control.classList.remove('bg-gray-300');
                } else {
                    control.classList.remove('bg-accent', 'w-8', 'active');
                    control.classList.add('bg-gray-300');
                }
            });
        }

        // Navigation
        function goToSlide(index) {
            currentSlide = (index + items.length) % items.length;
            syncActive(currentSlide);
        }

        function nextSlide() {
            goToSlide(currentSlide + 1);
        }

        function prevSlide() {
            goToSlide(currentSlide - 1);
        }

        // Auto-play
        function startAutoPlay() {
            if (items.length <= 1) return;
            stopAutoPlay();
            autoPlayTimer = setInterval(nextSlide, 5000);
        }

        function stopAutoPlay() {
            if (autoPlayTimer) {
                clearInterval(autoPlayTimer);
                autoPlayTimer = null;
            }
        }

        // Event listeners
        createControls();

        // Touch/mouse drag support
        let startPos = 0;
        let currentTranslate = 0;
        let isDragging = false;

        function pointerDown(x) {
            if (items.length <= 1) return;
            startPos = x;
            isDragging = false;
            isInteracting = true;
            stopAutoPlay();
        }

        function pointerMove(x) {
            if (items.length <= 1 || startPos === 0) return;
            const diff = x - startPos;
            if (Math.abs(diff) > 5) isDragging = true;
            if (!isDragging) return;
            currentTranslate = diff;
        }

        function pointerUp() {
            if (items.length <= 1 || !isDragging) {
                isInteracting = false;
                startAutoPlay();
                return;
            }

            const threshold = 50;
            if (currentTranslate > threshold) prevSlide();
            else if (currentTranslate < -threshold) nextSlide();

            startPos = 0;
            currentTranslate = 0;
            isDragging = false;
            isInteracting = false;
            startAutoPlay();
        }

        // Mouse
        track.addEventListener('mousedown', (e) => pointerDown(e.clientX));
        document.addEventListener('mousemove', (e) => pointerMove(e.clientX));
        document.addEventListener('mouseup', pointerUp);

        // Touch
        track.addEventListener('touchstart', (e) => pointerDown(e.touches[0].clientX), { passive: true });
        track.addEventListener('touchmove', (e) => pointerMove(e.touches[0].clientX), { passive: true });
        track.addEventListener('touchend', pointerUp);

        // Arrow keys (only when focus is inside slider)
        document.addEventListener('keydown', (e) => {
            if (!sliderContainer.contains(document.activeElement)) return;
            if (e.key === 'ArrowLeft') { e.preventDefault(); prevSlide(); startAutoPlay(); }
            if (e.key === 'ArrowRight') { e.preventDefault(); nextSlide(); startAutoPlay(); }
        });

        // Pause on hover & when tab hidden
        sliderContainer.addEventListener('mouseenter', stopAutoPlay);
        sliderContainer.addEventListener('mouseleave', startAutoPlay);
        document.addEventListener('visibilitychange', () => {
            document.hidden ? stopAutoPlay() : startAutoPlay();
        });

        // Init
        syncActive(currentSlide);
        startAutoPlay();
    });
</script>



<!-- CIRCULAR ABOUT SECTION -->
<section data-reveal-stagger class="reveal relative overflow-hidden mb-10 lg:mb-36">
    <div class="container mx-auto">
        <!-- ===== Mobile / Tablet / Laptop (grid) ===== -->
        <div class="block xl:hidden">
            <div class="mx-auto px-4">

                <!-- Logo + Heading -->
                <div class="text-center flex flex-col items-center">
                    <img src="/assets/img/o_logo.png" alt="logo" class="h-16 sm:h-20 object-contain mt-10">
                    <h2 class="h2 sm:h1 mt-6">
                        Фасады @objectName — наш <br class="hidden sm:block" />
                        проект для застройщика
                    </h2>
                </div>

                <!-- Description & Tags -->
                <div class="mt-6 max-w-[680px] mx-auto">
                    @if (!string.IsNullOrEmpty(coveringMaterial))
                    {
                        <p class="body2 mb-4 text-regular-primary">
                            @coveringMaterial
                        </p>
                    }

                    @if (systems.Any())
                    {
                        <div class="flex flex-wrap justify-center gap-3">
                            @foreach (var system in systems)
                            {
                                <span class="border border-accent text-accent bg-white px-4 py-3 body1 rounded-2xl font-medium">
                                    @system
                                </span>
                            }
                        </div>
                    }
                </div>

                <!-- Images grid -->
                @if (galleryImages.Any())
                {
                    <div class="mt-8 grid grid-cols-2 sm:grid-cols-3 gap-4">
                        @foreach (var image in galleryImages.Take(5))
                        {
                            <img src="@image.Url()" alt="@objectName"
                                 class="w-full aspect-square object-cover rounded-2xl shadow-custom-drop" />
                        }
                    </div>
                }

            </div>
        </div>

        <!-- ===== Desktop (original, untouched) ===== -->
        <div class="hidden xl:block">
            <div class="relative mx-auto">
                <!-- Circular container -->
                <div class="relative w-full aspect-square mx-auto rounded-full overflow-hidden shadow-custom-drop">

                    <!-- Second background pattern -->
                    <div class="absolute inset-0 top-0 rounded-full"
                         style="background: url('/assets/bg/lines3.svg') center center no-repeat #fff; background-size: cover;">
                    </div>

                    <!-- Central content -->
                    <div class="relative z-10 text-center h-full flex flex-col">
                        <div class="flex flex-col gap-4 justify-center">
                            <img src="/assets/img/o_logo.png" alt="logo" class="h-20 rounded-4xl object-contain mt-20">
                            <!-- Main heading -->
                            <h2 class="mt-[80px]">
                                Фасады @objectName — наш <br> проект для застройщика
                            </h2>
                        </div>

                        <!-- Description -->
                        <div class="max-w-[465px] body2 text-left absolute bottom-[43%] right-10">
                            @if (!string.IsNullOrEmpty(coveringMaterial))
                            {
                                <p class="body2 mb-3 text-regular-primary">
                                    @coveringMaterial
                                </p>
                            }
                            @if (systems.Any())
                            {
                                <div class="flex gap-3 mb-6">
                                    @foreach (var system in systems)
                                    {
                                        <span class="border border-accent text-accent bg-white px-4 py-3 body1 rounded-2xl font-medium">@system</span>
                                    }
                                </div>
                            }

                        </div>


                    </div>

                    <!-- Building images positioned absolutely around the circle -->
                    @if (galleryImages.Count >= 5)
                    {
                        <img src="@galleryImages[0].Url()" alt="@objectName"
                             class="absolute top-[44%] left-[-4%] w-16 h-16 md:w-[167px] md:h-[167px] rounded-4xl object-cover">
                        <img src="@galleryImages[1].Url()" alt="@objectName"
                             class="absolute top-[34%] left-[10%] transform -translate-y-1/2 w-16 h-16 md:w-[146px] md:h-[146px] rounded-xl object-cover">
                        <img src="@galleryImages[2].Url()" alt="@objectName"
                             class="absolute top-[66%] left-[10%] w-16 h-16 md:w-[146px] md:h-[146px] rounded-xl object-cover">
                        <img src="@galleryImages[3].Url()" alt="@objectName"
                             class="absolute top-[42%] left-[34%] transform -translate-x-1/2 w-16 h-16 md:w-[228px] md:h-[228px] rounded-xl object-cover">
                        <img src="@galleryImages[4].Url()" alt="@objectName"
                             class="absolute top-[81%] left-[50%] transform -translate-x-1/2 w-16 h-16 md:w-[142px] md:h-[142px] rounded-xl object-cover">
                    }

                </div>
            </div>
        </div>
    </div>
</section>
