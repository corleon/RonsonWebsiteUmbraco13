@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.ObEkt>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@{
	Layout = "Master.cshtml";
}

<!-- Breadcrumb -->
<nav class="mb-6 md:mb-8 mt-8 md:mt-16 text-center" aria-label="Breadcrumb">
    <ol class="list-reset inline-flex flex-wrap justify-center text-regular-secondary font-medium bg-white rounded-lg p-2 md:p-3 text-sm md:body2">
        <li>
            <a href="/" class="text-regular-secondary hover:text-accent">Главная</a>
            <span class="mx-1 md:mx-2">/</span>
        </li>
        <li>
            <a href="/ob-ekty/zhilye-kompleksy/" class="text-regular-secondary hover:text-accent">Объекты</a>
            <span class="mx-1 md:mx-2">/</span>
        </li>
        <li class="text-bold">ЖК Дивное</li>
    </ol>
</nav>

<!-- Object Content Section -->
<div class="container mx-auto mb-10 md:mb-40">
    <div class="grid lg:grid-cols-2 gap-8 items-stretch">
        <!-- Left Section - Information Card -->
        <div class="card h-full flex flex-col justify-between shadow-xl">
            <div>
                <h1 class="h1 mb-4 md:mb-6">ЖК Дивное</h1>

                <!-- Tags/Buttons -->
                <div class="flex flex-wrap gap-2 md:gap-3 mb-4 md:mb-6">
                    <span class="border border-accent text-accent bg-white px-3 py-2 md:px-4 md:py-3 body1 rounded-2xl font-medium text-sm md:text-base">РОНСОН-400</span>
                    <span class="border border-accent text-accent bg-white px-3 py-2 md:px-4 md:py-3 body1 rounded-2xl font-medium text-sm md:text-base">РОНСОН-300</span>
                </div>

                <!-- Material Description -->
                <p class="body1 mb-8 md:mb-12 text-bold">
                    <b>Облицовочный материал:</b> керамогранит (скрытое крепление), стеклофибробетон на модульной системе, плитка на затирке.
                </p>

                <!-- Address and Completion Info -->
                <div class="grid grid-cols-1 md:flex gap-4 md:gap-6">
                    <div class="border border-gray rounded-lg p-3 md:p-4 flex-1">
                        <p class="body1 text-bold">г. Видное, Зеленый пер., д. 9</p>
                        <p class="body2 text-regular-secondary mt-1">Адрес объекта</p>
                    </div>
                    <div class="border border-gray rounded-lg p-3 md:p-4">
                        <p class="body1 text-bold">2023</p>
                        <p class="body2 text-regular-secondary mt-1">Окончание монтажа</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Section - Image Slider -->
        <div class="h-full flex flex-col">
            <!-- Story-like Slider -->
            <div class="slider-container h-full flex flex-col">
                <div class="slider-track overflow-hidden shadow-lg  lg:flex-1 relative">
                    <div class="slider-item active">
                        <img src="/assets/img/object1.jpg" alt="ЖК Дивное - вид на жилой комплекс" loading="lazy" class="w-full h-full object-cover">
                        <button onclick="openImageModal('/assets/img/object1.jpg', 'ЖК Дивное - вид на жилой комплекс')" class="absolute top-4 right-4   transition-all duration-200 rounded-full backdrop-blur-sm cursor-pointer zoom-button" data-slide="0">
                            <img src="/assets/icons/zoom.svg" alt="zoom" class="w-12 h-12">
                        </button>
                    </div>
                    <div class="slider-item">
                        <img src="/assets/img/news11.jpg" alt="ЖК Дивное - архитектурные детали" loading="lazy" class="w-full h-full object-cover">
                        <button onclick="openImageModal('/assets/img/news11.jpg', 'ЖК Дивное - архитектурные детали')" class="absolute top-4 right-4   transition-all duration-200 rounded-full backdrop-blur-sm cursor-pointer zoom-button" data-slide="1">
                            <img src="/assets/icons/zoom.svg" alt="zoom" class="w-12 h-12">
                        </button>
                    </div>
                    <div class="slider-item">
                        <img src="/assets/img/p1.jpg" alt="ЖК Дивное - фасадные конструкции" loading="lazy" class="w-full h-full object-cover">
                        <button onclick="openImageModal('/assets/img/p1.jpg', 'ЖК Дивное - фасадные конструкции')" class="absolute top-4 right-4   transition-all duration-200 rounded-full backdrop-blur-sm cursor-pointer zoom-button" data-slide="2">
                            <img src="/assets/icons/zoom.svg" alt="zoom" class="w-12 h-12">
                        </button>
                    </div>
                    <div class="slider-item">
                        <img src="/assets/img/p2.jpg" alt="ЖК Дивное - внутренние помещения" loading="lazy" class="w-full h-full object-cover">
                        <button onclick="openImageModal('/assets/img/p2.jpg', 'ЖК Дивное - внутренние помещения')" class="absolute top-4 right-4   transition-all duration-200 rounded-full backdrop-blur-sm cursor-pointer zoom-button" data-slide="3">
                            <img src="/assets/icons/zoom.svg" alt="zoom" class="w-12 h-12">
                        </button>
                    </div>
                </div>
                <div class="slider-controls mt-4">
                    <!-- Controls will be generated by JavaScript -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Image Modal -->
<div id="imageModal" class="fixed inset-0 bg-black bg-opacity-30 z-50 hidden flex items-center justify-center p-2">
    <div class="relative w-full h-full flex items-center justify-center">
        <img id="modalImage" src="" alt="" class="max-w-none max-h-none w-auto h-auto object-contain rounded-lg shadow-2xl">
        <button onclick="closeImageModal()" class="absolute top-6 right-6 bg-white/90 hover:bg-white transition-all duration-200 rounded-full p-4 shadow-lg cursor-pointer z-10">
            <svg class="w-8 h-8 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>
        <div class="absolute bottom-6 left-6 bg-black/80 text-white px-6 py-3 rounded-xl backdrop-blur-sm">
            <p id="modalImageAlt" class="text-base font-medium"></p>
        </div>

        <!-- Zoom Controls -->
        <div class="absolute bottom-6 right-6 flex gap-3">
            <button onclick="zoomIn()" class="bg-white/90 hover:bg-white transition-all duration-200 rounded-full p-3 shadow-lg cursor-pointer">
                <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
            </button>
            <button onclick="zoomOut()" class="bg-white/90 hover:bg-white transition-all duration-200 rounded-full p-3 shadow-lg cursor-pointer">
                <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                </svg>
            </button>
            <button onclick="resetZoom()" class="bg-white/90 hover:bg-white transition-all duration-200 rounded-full p-3 shadow-lg cursor-pointer">
                <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"></path>
                </svg>
            </button>
        </div>
    </div>
</div>

<script>
    // Image Modal Functions
    let currentZoom = 1;
    let isDragging = false;
    let startX = 0;
    let startY = 0;
    let translateX = 0;
    let translateY = 0;

    function openImageModal(imageSrc, imageAlt) {
        console.log('Opening modal with:', { imageSrc, imageAlt });

        const modal = document.getElementById('imageModal');
        const modalImage = document.getElementById('modalImage');
        const modalImageAlt = document.getElementById('modalImageAlt');

        if (!modal || !modalImage || !modalImageAlt) {
            console.error('Modal elements not found');
            return;
        }

        modalImage.src = imageSrc;
        modalImage.alt = imageAlt;
        modalImageAlt.textContent = imageAlt;

        console.log('Modal image src set to:', modalImage.src);

        // Reset zoom and position
        currentZoom = 1;
        translateX = 0;
        translateY = 0;
        updateImageTransform();

        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
    }

    function closeImageModal() {
        const modal = document.getElementById('imageModal');
        modal.classList.add('hidden');
        document.body.style.overflow = '';
    }

    function zoomIn() {
        currentZoom = Math.min(currentZoom * 1.5, 5);
        updateImageTransform();
    }

    function zoomOut() {
        currentZoom = Math.max(currentZoom / 1.5, 0.5);
        updateImageTransform();
    }

    function resetZoom() {
        currentZoom = 1;
        translateX = 0;
        translateY = 0;
        updateImageTransform();
    }

    function updateImageTransform() {
        const modalImage = document.getElementById('modalImage');
        modalImage.style.transform = `scale(${currentZoom}) translate(${translateX}px, ${translateY}px)`;
    }

    // Mouse drag functionality
    function startDrag(e) {
        if (currentZoom > 1) {
            isDragging = true;
            startX = e.clientX - translateX;
            startY = e.clientY - translateY;
            e.preventDefault();
        }
    }

    function drag(e) {
        if (isDragging && currentZoom > 1) {
            translateX = e.clientX - startX;
            translateY = e.clientY - startY;
            updateImageTransform();
        }
    }

    function stopDrag() {
        isDragging = false;
    }

    // Add drag event listeners to modal image
    document.addEventListener('DOMContentLoaded', function () {
        const modalImage = document.getElementById('modalImage');
        if (modalImage) {
            modalImage.addEventListener('mousedown', startDrag);
            document.addEventListener('mousemove', drag);
            document.addEventListener('mouseup', stopDrag);
        }
    });

    // Close modal on escape key
    document.addEventListener('keydown', function (event) {
        if (event.key === 'Escape') {
            closeImageModal();
        }
    });

    // Close modal when clicking outside the image
    document.getElementById('imageModal').addEventListener('click', function (event) {
        if (event.target === this) {
            closeImageModal();
        }
    });

    document.addEventListener('DOMContentLoaded', () => {
        const sliderContainer = document.querySelector('.slider-container');
        if (!sliderContainer) return;

        const track = sliderContainer.querySelector('.slider-track');
        const items = Array.from(sliderContainer.querySelectorAll('.slider-item'));
        const controlsContainer = sliderContainer.querySelector('.slider-controls');
        if (!track || !items.length || !controlsContainer) return;

        // Use slide marked .active in markup, else 0
        let currentSlide = Math.max(0, items.findIndex(el => el.classList.contains('active')));
        if (currentSlide === -1) currentSlide = 0;

        let autoPlayInterval = null;
        const autoPlayDelay = 3000;

        // Build dots (no styles, no aria)
        controlsContainer.innerHTML = '';
        items.forEach((_, i) => {
            const dot = document.createElement('div');
            dot.className = 'slider-control' + (i === currentSlide ? ' active' : '');
            dot.dataset.slide = String(i);
            dot.tabIndex = 0;
            controlsContainer.appendChild(dot);
        });

        const getDots = () => Array.from(controlsContainer.querySelectorAll('.slider-control'));

        function syncActive(index) {
            items.forEach((item, i) => item.classList.toggle('active', i === index));
            getDots().forEach((dot, i) => dot.classList.toggle('active', i === index));

            // Show/hide zoom buttons based on active slide
            const zoomButtons = document.querySelectorAll('.zoom-button');
            zoomButtons.forEach((button, i) => {
                if (i === index) {
                    button.style.display = 'block';
                    button.style.zIndex = '10';
                } else {
                    button.style.display = 'none';
                    button.style.zIndex = '1';
                }
            });
        }

        function showSlide(index) {
            if (index < 0 || index >= items.length) return;
            currentSlide = index;
            syncActive(currentSlide);
        }

        function nextSlide() {
            showSlide((currentSlide + 1) % items.length);
        }

        function prevSlide() {
            showSlide((currentSlide - 1 + items.length) % items.length);
        }

        function startAutoPlay() {
            stopAutoPlay(); // avoid stacking intervals
            autoPlayInterval = setInterval(nextSlide, autoPlayDelay);
        }

        function stopAutoPlay() {
            if (autoPlayInterval) {
                clearInterval(autoPlayInterval);
                autoPlayInterval = null;
            }
        }

        // Dot clicks + keyboard (event delegation)
        controlsContainer.addEventListener('click', (e) => {
            const dot = e.target.closest('.slider-control');
            if (!dot) return;
            const idx = Number(dot.dataset.slide);
            showSlide(idx);
            startAutoPlay();
        });

        controlsContainer.addEventListener('keydown', (e) => {
            if (e.key !== 'Enter' && e.key !== ' ') return;
            const dot = e.target.closest('.slider-control');
            if (!dot) return;
            e.preventDefault();
            const idx = Number(dot.dataset.slide);
            showSlide(idx);
            startAutoPlay();
        });

        // Swipe / drag
        let startX = 0, currentX = 0, isInteracting = false;

        function pointerDown(x) {
            startX = x;
            currentX = x;
            isInteracting = true;
            stopAutoPlay();
        }
        function pointerMove(x) {
            if (!isInteracting) return;
            currentX = x;
        }
        function pointerUp() {
            if (!isInteracting) return;
            const dx = startX - currentX;
            const threshold = 50;
            if (Math.abs(dx) > threshold) (dx > 0 ? nextSlide() : prevSlide());
            isInteracting = false;
            startAutoPlay();
        }

        // Mouse
        track.addEventListener('mousedown', (e) => pointerDown(e.clientX));
        document.addEventListener('mousemove', (e) => pointerMove(e.clientX));
        document.addEventListener('mouseup', pointerUp);

        // Touch
        track.addEventListener('touchstart', (e) => pointerDown(e.touches[0].clientX), { passive: true });
        track.addEventListener('touchmove', (e) => pointerMove(e.touches[0].clientX), { passive: true });
        track.addEventListener('touchend', pointerUp);

        // Arrow keys (only when focus is inside slider)
        document.addEventListener('keydown', (e) => {
            if (!sliderContainer.contains(document.activeElement)) return;
            if (e.key === 'ArrowLeft') { e.preventDefault(); prevSlide(); startAutoPlay(); }
            if (e.key === 'ArrowRight') { e.preventDefault(); nextSlide(); startAutoPlay(); }
        });

        // Pause on hover & when tab hidden
        sliderContainer.addEventListener('mouseenter', stopAutoPlay);
        sliderContainer.addEventListener('mouseleave', startAutoPlay);
        document.addEventListener('visibilitychange', () => {
            document.hidden ? stopAutoPlay() : startAutoPlay();
        });

        // Init
        syncActive(currentSlide);
        startAutoPlay();
    });
</script>



<!-- CIRCULAR ABOUT SECTION -->
<section data-reveal-stagger class="reveal relative overflow-hidden mb-10 lg:mb-36">
    <div class="container mx-auto">
        <!-- ===== Mobile / Tablet / Laptop (grid) ===== -->
        <div class="block xl:hidden">
            <div class="mx-auto px-4">

                <!-- Logo + Heading -->
                <div class="text-center flex flex-col items-center">
                    <img src="/assets/img/o_logo.png" alt="logo" class="h-16 sm:h-20 object-contain mt-10">
                    <h2 class="h2 sm:h1 mt-6">
                        Фасады ЖК Дивное — наш <br class="hidden sm:block" />
                        проект для застройщика <br class="hidden sm:block" />
                        «СИТИ21»
                    </h2>
                </div>

                <!-- Description & Tags -->
                <div class="mt-6 max-w-[680px] mx-auto">
                    <p class="body2 mb-4 text-regular-primary">
                        Мы&nbsp;занимались фасадным строительством домов комплекса из&nbsp;керамогранита
                        с&nbsp;видимым и&nbsp;скрытым креплениями.
                    </p>

                    <div class="flex flex-wrap justify-center gap-3">
                        <span class="border border-accent text-accent bg-white px-4 py-3 body1 rounded-2xl font-medium">
                            РОНСОН-400
                        </span>
                        <span class="border border-accent text-accent bg-white px-4 py-3 body1 rounded-2xl font-medium">
                            РОНСОН-300
                        </span>
                    </div>
                </div>

                <!-- Images grid -->
                <div class="mt-8 grid grid-cols-2 sm:grid-cols-3 gap-4">
                    <img src="/assets/img/o111.png" alt="Building 1"
                         class="w-full aspect-square object-cover rounded-2xl shadow-custom-drop" />
                    <img src="/assets/img/o222.png" alt="Building 2"
                         class="w-full aspect-square object-cover rounded-2xl shadow-custom-drop" />
                    <img src="/assets/img/o333.png" alt="Building 3"
                         class="w-full aspect-square object-cover rounded-2xl shadow-custom-drop" />
                    <img src="/assets/img/o444.png" alt="Building 4"
                         class="w-full aspect-square object-cover rounded-2xl shadow-custom-drop" />
                    <img src="/assets/img/o555.png" alt="Building 5"
                         class="w-full aspect-square object-cover rounded-2xl shadow-custom-drop" />
                </div>

            </div>
        </div>

        <!-- ===== Desktop (original, untouched) ===== -->
        <div class="hidden xl:block">
            <div class="relative mx-auto">
                <!-- Circular container -->
                <div class="relative w-full aspect-square mx-auto rounded-full overflow-hidden shadow-custom-drop">

                    <!-- Second background pattern -->
                    <div class="absolute inset-0 top-0 rounded-full"
                         style="background: url('/assets/bg/lines3.svg') center center no-repeat #fff; background-size: cover;">
                    </div>

                    <!-- Central content -->
                    <div class="relative z-10 text-center h-full flex flex-col">
                        <div class="flex flex-col gap-4 justify-center">
                            <img src="/assets/img/o_logo.png" alt="logo" class="h-20 rounded-4xl object-contain mt-20">
                            <!-- Main heading -->
                            <h2 class="h1 mt-[80px]">
                                Фасады ЖК Дивное — наш <br> проект для застройщика <br> «СИТИ21»
                            </h2>
                        </div>

                        <!-- Description -->
                        <div class="max-w-[465px] body2 text-left absolute bottom-[43%] right-10">
                            <p class="body2 mb-3 text-regular-primary">
                                Мы занимались фасадным строительством домов комплекса из керамогранита с видимым и скрытым креплениями.
                            </p>
                            <div class="flex gap-3 mb-6">
                                <span class="border border-accent text-accent bg-white px-4 py-3 body1 rounded-2xl font-medium">РОНСОН-400</span>
                                <span class="border border-accent text-accent bg-white px-4 py-3 body1 rounded-2xl font-medium">РОНСОН-300</span>
                            </div>

                        </div>


                    </div>

                    <!-- Building images positioned absolutely around the circle -->
                    <img src="/assets/img/o111.png" alt="Building 1"
                         class="absolute top-[44%] left-[-4%] w-16 h-16 md:w-[167px] md:h-[167px] rounded-4xl object-cover">
                    <img src="/assets/img/o222.png" alt="Building 2"
                         class="absolute top-[34%] left-[10%] transform -translate-y-1/2 w-16 h-16 md:w-[146px] md:h-[146px] rounded-xl object-cover">
                    <img src="/assets/img/o333.png" alt="Building 3"
                         class="absolute top-[66%] left-[10%] w-16 h-16 md:w-[146px] md:h-[146px] rounded-xl object-cover">
                    <img src="/assets/img/o444.png" alt="Building 4"
                         class="absolute top-[42%] left-[34%] transform -translate-x-1/2 w-16 h-16 md:w-[228px] md:h-[228px] rounded-xl object-cover">
                    <img src="/assets/img/o555.png" alt="Building 4"
                         class="absolute top-[81%] left-[50%] transform -translate-x-1/2 w-16 h-16 md:w-[142px] md:h-[142px] rounded-xl object-cover">

                </div>
            </div>
        </div>
    </div>
</section>